#!/usr/bin/env python3

import chardet
import errno
import io
import os
import re
import sys
import platform
import subprocess
from enum import IntEnum
from subprocess import PIPE, DEVNULL

no_warning = True
ps_stderr = DEVNULL

def printMsg(msg):
    print(msg)

def printWarning(msg):
    if no_warning is False:
        print(msg, file=sys.stderr)

def printError(msg):
    print(msg, file=sys.stderr)

def confirm(msg, no_by_default = False):
    stdout_current = sys.stdout
    sys.stdout = sys.stderr
    if no_by_default == True:
        yesno = input(msg + " [y/N] ").strip() == "y"
    else:
        yesno = input(msg + " [Y/n] ").strip() != "n"
    sys.stdout = stdout_current
    return yesno

class Shell:

    def traditional(cmd):
        cmdline = "cmd.exe /c " + cmd
        subprocess.Popen(cmdline, shell=True, stdout=DEVNULL, stderr=ps_stderr)

    def ps(cmd):
        cmdline = "powershell.exe -command \"& {" + cmd + "}\""
        if platform.system() == "Windows":
            cmdline = cmdline.replace("\\$", "$")
            stderr = DEVNULL
        else:
            stderr = ps_stderr
        proc = subprocess.Popen(cmdline, shell=True, stdout=PIPE, stderr=stderr)
        out, err = proc.communicate()
        return out

class PSArray:

    def __init__(self):
        self.stream = None
        self.nextline = None

    def readline(self):
        if self.stream is None:
            return None
        if self.nextline is None:
            retval = self.stream.readline()
            if retval is None:
                return None
        else:
            retval = self.nextline
        line = self.stream.readline()
        while line is not None and len(line) > 0 and line[0] == " ":
            retval = retval.rstrip() + line.lstrip()
            line = self.stream.readline()
        self.nextline = line
        return retval

    def build(self, cmd, name_key=None, name_target=None, flag_exact=False):
        self.stream = None
        self.nextline = None

        name_key_u = name_key.upper() if name_key is not None else None
        name_target_u = name_target.upper() if name_target is not None else None

        out = Shell.ps(cmd + "| format-list *")
        if len(out) > 0:
            coding = chardet.detect(out)["encoding"]
            if coding is not None:
                self.stream = io.StringIO(out.decode(coding))

        if self.stream is None:
            return []

        all_list = []
        item_alist = {}
        line = self.readline()
        while line:
            line = line.strip()
            if len(line) > 0:
                name, value = line.split(':', 1)
                name = name.strip()
                name_u = name.upper()
                value = value.strip()
                item_alist.update({name_u: value})
            else:
                if len(item_alist) > 0:
                    if name_key_u is None or name_target_u is None:
                        all_list.append(item_alist)
                    else:
                        if flag_exact:
                            if name_target == item_alist[name_key_u]:
                                all_list.append(item_alist)
                        else:
                            if name_target_u in item_alist[name_key_u].upper():
                                all_list.append(item_alist)
                    item_alist = {}
            line = self.readline()

        if len(item_alist) > 0:
            if name_key_u is None or name_target_u is None:
                all_list.append(item_alist)
            else:
                if flag_exact:
                    if name_target == item_alist[name_key_u]:
                        all_list.append(item_alist)
                else:
                    if name_target_u in item_alist[name_key_u].upper():
                        all_list.append(item_alist)
            item_alist = {}

        if name_key_u is not None:
            all_list.sort(key=lambda x:x[name_key_u].upper())

        return all_list

class Mode:

    class Index(IntEnum):
        NONE = -1
        PROCESS = 0
        APPLICATION = 1
        INSTALLED = 2
        PACKAGE = 3
        SERVICE = 4
        STARTUP = 5
        MAX = 6

    class OpIndex(IntEnum):
        NONE = -1
        LIST = 0
        INFO = 1
        START = 2
        STOP = 3
        REMOVE = 4
        MAX = 5

    target = None
    separator = None
    flag_exact = False
    flag_yes = False
    flag_header = False

    @classmethod
    def setTarget(cls, target):
        if target is not None:
            cls.target = target

    @classmethod
    def setSeparator(cls, sep):
        cls.separator = sep

    @classmethod
    def setFlags(cls, flag_exact=False, flag_yes=False, flag_header=False):
        cls.flag_exact = flag_exact
        cls.flag_yes = flag_yes
        cls.flag_header = flag_header

    def __init__(self, name):
        self.object_func_list = [None] * Mode.OpIndex.MAX
        self.property_func_list = [None] * Mode.OpIndex.MAX
        self.header_func_list = [None] * Mode.OpIndex.MAX
        self.name_key_u = None
        self.mode_name = name

    def name(self):
        return self.mode_name

    def sep(self):
        return self.separator

    def confirmAllTargets(self):
        if self.flag_yes:
            return True
        if self.target is None:
            message = "All {0} targets, ok?".format(self.name())
            return confirm(message, True)

    def confirm(self, op_name, name, value, no_by_default = False):
        if self.flag_yes:
            return True
        message = "{1} {2} {0} ({3}), ok?".format(self.name(), op_name, name, value)
        return confirm(message, no_by_default)

    def warningNoCommandCandidates(self, name):
        printWarning("{1} {0}: No command candidates found.".format(self.name(), name))

    def test(self, op_no):
        return self.object_func_list[op_no] is not None or self.property_func_list[op_no] is not None

    def op(self, op_no):
        if op_no == Mode.OpIndex.NONE or op_no >= Mode.OpIndex.MAX:
            return errno.ENOENT
        if self.object_func_list[op_no] is None and self.property_func_list[op_no] is None:
            return errno.ENOENT
        if op_no != Mode.OpIndex.LIST and self.confirmAllTargets() == False:
            return errno.ENOENT
        
        flag_dirty = False
        object_list = self.prepareObjectList()
        if len(object_list) > 0:
            if self.object_func_list[op_no] is not None:
                if self.flag_header and self.header_func_list[op_no] is not None:
                    self.header_func_list[op_no]()
                for o in object_list:
                    if self.object_func_list[op_no](o) == True:
                        flag_dirty = True
            if self.property_func_list[op_no] is not None:
                props_list = self.preparePropertiesList(object_list)
                if len(props_list) > 0:
                    if self.flag_header and self.header_func_list[op_no] is not None:
                        self.header_func_list[op_no]()
                    for p in props_list:
                        if self.property_func_list[op_no](p) == True:
                            flag_dirty = True
        if flag_dirty == False:
            return errno.ENOENT
        else:
            return 0

class Process(Mode):

    def __init__(self):
        super().__init__("process")
        self.object_func_list[Mode.OpIndex.LIST] = self.doList
        self.property_func_list[Mode.OpIndex.INFO] = self.doInfo
        self.header_func_list[Mode.OpIndex.INFO] = self.doPrintHeader
        self.property_func_list[Mode.OpIndex.STOP] = self.doStop
        self.name_key_u = "PROCESSNAME"

    def prepareObjectList(self):
        cmd = "get-process | select id, processname"
        return PSArray().build(cmd, self.name_key_u, self.target, self.flag_exact)

    def preparePropertiesList(self, olist):
        sep = ""
        idlist = ""
        for o in olist:
            idlist = idlist + sep + o.get("ID")
            sep = ","
        cmd = "get-process -id " + idlist + " |%{ \\$p = \\$_; \\$x = \\$_.id; get-ciminstance -classname Win32_Process -namespace root\\cimv2 -filter \\\"processid = \\$x\\\" |%{ \\$u = (invoke-cimmethod -inputobject \\$_ -methodname getowner); [pscustomobject]@{ id = \\$p.id; processname = \\$p.processname; domain = \\$u.domain; user = \\$u.user; path = \\$_.executablepath; cmd = \\$_.commandline; priority = \\$_.priority; product = \\$p.product; productversion = \\$p.productversion; company = \\$p.company; description = \\$p.description }}}"
        return PSArray().build(cmd, self.name_key_u)

    def doList(self, o):
        printMsg("{1}{0}{2}".format(self.sep(), self.name(), o.get("PROCESSNAME")))
        return True

    def doInfo(self, p):
        domain = p.get("DOMAIN")
        owner = p.get("USER") or ""
        if domain is not None:
            owner = domain + "\\" + owner
        printMsg("{1}{0}{2}{0}{3}{0}{4}{0}{5}{0}{6}{0}{7}{0}{8}{0}{9}{0}{10}{0}{11}".format(self.sep(), self.name(), p.get("PROCESSNAME"), p.get("ID"), p.get("PRIORITY") or "", owner, p.get("PRODUCT") or "", p.get("PRODUCTVERSION") or "", p.get("DESCRIPTION") or "", p.get("COMPANY") or "", p.get("PATH") or "", p.get("CMD") or ""))
        return True

    def doStop(self, p):
        flag_dirty = False
        if self.confirm("Stop", p.get("PROCESSNAME"), p.get("ID")):
            Shell.ps("stop-process -id " + p.get("ID"))
            flag_dirty = True
        return flag_dirty

    def doPrintHeader(self):
        printMsg("{1}{0}{2}{0}{3}{0}{4}{0}{5}{0}{6}{0}{7}{0}{8}{0}{9}{0}{10}{0}{11}".format(self.sep(), "mode", "name", "pid", "priority", "owner", "product", "version", "description", "company", "path", "command"))

class Application(Mode):
        
    def __init__(self):
        super().__init__("application")
        self.object_func_list[Mode.OpIndex.LIST] = self.doList
        self.object_func_list[Mode.OpIndex.INFO] = self.doInfo
        self.header_func_list[Mode.OpIndex.INFO] = self.doPrintHeader
        self.object_func_list[Mode.OpIndex.START] = self.doStart
        self.name_key_u = "NAME"

    def prepareObjectList(self):
        cmd = "(new-object -com shell.application).namespace(\\\"shell:appsfolder\\\").items() | select-object name, path"
        return PSArray().build(cmd, self.name_key_u, self.target, self.flag_exact)

    def doList(self, o):
        printMsg("{1}{0}{2}".format(self.sep(), self.name(), o.get("NAME")))
        return True

    def doInfo(self, o):

        printMsg("{1}{0}{2}{0}{3}".format(self.sep(), self.name(), o.get("NAME"), o.get("PATH")))
        return True

    def doStart(self, o):
        flag_dirty = False
        if o.get("NAME") is None:
            self.warningNoCommandCandidates(o.get("NAME"))
        else:
            if self.confirm("Run", o.get("NAME"), o.get("PATH")):
                Shell.ps("start-process \\\"shell:appsfolder\\" + o.get("PATH") + "\\\"")
                flag_dirty = True
        return flag_dirty

    def doPrintHeader(self):
        printMsg("{1}{0}{2}{0}{3}".format(self.sep(), "mode", "name", "path"))

class Installed(Mode):
        
    def __init__(self):
        super().__init__("installed")
        self.object_func_list[Mode.OpIndex.LIST] = self.doList
        self.object_func_list[Mode.OpIndex.INFO] = self.doInfo
        self.header_func_list[Mode.OpIndex.INFO] = self.doPrintHeader
        self.object_func_list[Mode.OpIndex.REMOVE] = self.doRemove
        self.name_key_u = "NAME"

    def prepareObjectList(self):
        cmd = "get-item (\\\"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\\\", \\\"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\\\", \\\"HKLM:\\Software\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\\\") |%{ \\$k = \\$_; \\$k.getvalue(\\\"UninstallString\\\") |% { if (\\$_ -ne \\$null) { [pscustomobject]@{ key = \\$k.pspath; name = \\$k.getvalue(\\\"DisplayName\\\"); version = \\$k.getvalue(\\\"DisplayVersion\\\"); publisher = \\$k.getvalue(\\\"Publisher\\\"); uninstall = \\$_ }}}}"
        return PSArray().build(cmd, self.name_key_u, self.target, self.flag_exact)

    def doList(self, o):
        flag_dirty = False
        if len(o.get("NAME")) > 0:
            printMsg("{1}{0}{2}".format(self.sep(), self.name(), o.get("NAME")))
            flag_dirty = True
        return flag_dirty

    def doInfo(self, o):
        printMsg("{1}{0}{2}{0}{3}{0}{4}{0}{5}".format(self.sep(), self.name(), o.get("NAME") or "", o.get("VERSION") or "", o.get("PUBLISHER") or "", o.get("UNINSTALL") or ""))
        return True

    def doRemove(self, o):
        flag_dirty = False
        if o.get("UNINSTALL") is None:
            self.warningNoCommandCandidates(o.get("NAME"))
        else:
            if self.confirm("Uninstall", o.get("NAME"), o.get("UNINSTALL"), no_by_default=True):
                Shell.traditional(o.get("UNINSTALL"))
                flag_dirty = True
        return flag_dirty

    def doPrintHeader(self):
        printMsg("{1}{0}{2}{0}{3}{0}{4}{0}{5}".format(self.sep(), "mode", "name", "version", "publisher", "uninstall"))

class Package(Mode):

    def __init__(self):
        super().__init__("package")
        self.object_func_list[Mode.OpIndex.LIST] = self.doList
        self.property_func_list[Mode.OpIndex.INFO] = self.doInfo
        self.header_func_list[Mode.OpIndex.INFO] = self.doPrintHeader
        self.property_func_list[Mode.OpIndex.START] = self.doStart
        self.object_func_list[Mode.OpIndex.REMOVE] = self.doRemove
        self.name_key_u = "NAME"

    def prepareObjectList(self):
        cmd = "get-appxpackage *"
        return PSArray().build(cmd, self.name_key_u, self.target, self.flag_exact)

    def preparePropertiesList(self, olist):
        sep = ""
        name_list = ""
        for o in olist:
            name_list = name_list + sep + "\\\"" + o.get("NAME") + "\\\""
            sep = ","
        cmd = "(" + name_list + ") |%{ get-appxpackage -name \\$_ |%{ try { \\$x = \\$_; \\$q = (get-appxpackagemanifest -package \\$x).package; \\$p = \\$q.properties; \\$a = \\$q.applications.application; [pscustomobject]@{ name = \\$x.name; packagefullname = \\$x.packagefullname; packagefamilyname = \\$x.packagefamilyname; publisherdisplayname = \\$p.publisherdisplayname; apid = \\$a.id; executable = \\$a.executable }} catch {}}}"
        return PSArray().build(cmd, self.name_key_u)

    def doList(self, o):
        printMsg("{1}{0}{2}".format(self.sep(), self.name(), o.get("NAME")))
        return True

    def doInfo(self, p):
        printMsg("{1}{0}{2}{0}{3}{0}{4}{0}{5}".format(self.sep(), self.name(), p.get("NAME"), p.get("PACKAGEFULLNAME"), p.get("PUBLISHERDISPLAYNAME") or "", p.get("EXECUTABLE") or ""))
        return True

    def doStart(self, p):
        flag_dirty = False
        if p.get("PACKAGEFAMILYNAME") is None:
            self.warningNoCommandCandidates(p.get("NAME"))
        else:
            cmd = "\\$e = (get-appxpackagemanifest -package \\\"" + p.get("PACKAGEFULLNAME") + "\\\").package.applications.application.id; if (\\$e -ne \\$null) { \\$e = @() + \\$e }; (.{foreach (\\$i in \\$e) {[pscustomobject]@{id=\\$i}}})"
            exec_list = PSArray().build(cmd, "ID")
            if len(exec_list) > 0:
                for x in exec_list:
                    path = p.get("PACKAGEFAMILYNAME") + "!" + x.get("ID")
                    if self.confirm("Start", p.get("NAME"), path):
                        Shell.ps("start-process \\\"shell:appsfolder\\" + path + "\\\"")
                        flag_dirty = True
        return flag_dirty

    def doRemove(self, o):
        flag_dirty = False
        if o.get("PACKAGEFULLNAME") is None:
            self.warningNoCommandCandidates(o.get("NAME"))
        else:
            if self.confirm("Uninstall", o.get("NAME"), o.get("PACKAGEFULLNAME"), no_by_default=True):
                Shell.ps("remove-appxpackage \\\"" + o.get("PACKAGEFULLNAME") + "\\\"")
                flag_dirty = True
        return flag_dirty

    def doPrintHeader(self):
        printMsg("{1}{0}{2}{0}{3}{0}{4}{0}{5}".format(self.sep(), "mode", "name", "package", "publisher", "executable"))

class Service(Mode):

    def __init__(self):
        super().__init__("service")
        self.object_func_list[Mode.OpIndex.LIST] = self.doList
        self.property_func_list[Mode.OpIndex.INFO] = self.doInfo
        self.header_func_list[Mode.OpIndex.INFO] = self.doPrintHeader
        self.property_func_list[Mode.OpIndex.START] = self.doStart
        self.property_func_list[Mode.OpIndex.STOP] = self.doStop
        self.name_key_u = "DISPLAYNAME"

    def prepareObjectList(self):
        cmd = "get-service | select-object name, displayname"
        return PSArray().build(cmd, self.name_key_u, self.target, self.flag_exact)

    def preparePropertiesList(self, olist):
        sep = ""
        name_list = ""
        for o in olist:
            name_list = name_list + sep + "name=\'" + o.get("NAME") + "\'"
            sep = " or "
        cmd = "get-ciminstance -class win32_service -filter \\\"" + name_list + "\\\" | select-object name, displayname, processid, startmode, state, pathname"
        return PSArray().build(cmd, self.name_key_u)

    def doList(self, o):
        printMsg("{1}{0}{2}".format(self.sep(), self.name(), o.get("DISPLAYNAME")))
        return True

    def doInfo(self, p):
        printMsg("{1}{0}{2}{0}{3}{0}{4}{0}{5}{0}{6}{0}{7}".format(self.sep(), self.name(), p.get("DISPLAYNAME"), p.get("NAME") or "", p.get("STARTMODE") or "", p.get("STATE") or "", p.get("PROCESSID") or "", p.get("PATHNAME") or ""))
        return True

    def doStart(self, p):
        flag_dirty = False
        if p.get("NAME") is None:
            self.warningNoCommandCandidates(p.get("DISPLAYNAME"))
        else:
            if self.confirm("Start", p.get("DISPLAYNAME"), p.get("NAME")):
                Shell.ps("(get-wmiobject win32_service | where-object name -eq \"" + p.get("NAME") + "\").startservice()")
                flag_dirty = True
        return flag_dirty

    def doStop(self, p):
        flag_dirty = False
        if p.get("NAME") is None:
            self.warningNoCommandCandidates(p.get("DISPLAYNAME"))
        else:
            if self.confirm("Stop", p.get("DISPLAYNAME"), p.get("NAME")):
                Shell.ps("(get-wmiobject win32_service | where-object name -eq \"" + p.get("NAME") + "\").stopservice()")
                flag_dirty = True
        return flag_dirty

    def doPrintHeader(self):
        printMsg("{1}{0}{2}{0}{3}{0}{4}{0}{5}{0}{6}{0}{7}".format(self.sep(), "mode", "name", "internal", "mode", "state", "pid", "path"))

class Startup(Mode):

    def __init__(self):
        super().__init__("startup")
        self.object_func_list[Mode.OpIndex.LIST] = self.doList
        self.object_func_list[Mode.OpIndex.INFO] = self.doInfo
        self.header_func_list[Mode.OpIndex.INFO] = self.doPrintHeader
        self.object_func_list[Mode.OpIndex.START] = self.doStart
        self.object_func_list[Mode.OpIndex.STOP] = self.doStop
        self.name_key_u = "NAME"

    def prepareObjectList(self):
        cmd = "\\$r = @(); \\$ns = \\\"\\\\Software\\\\\\\"; \\$nw = \\\"Microsoft\\\\Windows\\\\CurrentVersion\\\\\\\"; \\$nr = \\$nw + \\\"Run\\\"; \\$ne = \\\":\\\" + \\$ns + \\$nw + \\\"Explorer\\\\StartupApproved\\\\*\\\"; \\$nm = \\\"HKLM:\\\" + \\$ns; \\$nc = \\\"HKCU:\\\" + \\$ns; \\$l = @(\\\"User\\\", \\\"System\\\", \\\"WoW\\\"); \\$e = @(\\$nc, \\$nm, (\\$nm + \\\"Wow6432Node\\\\\\\")); \\$f = @(\\\"\\\", \\\"Common \\\"); foreach (\\$i in 0..2) { \\$k = get-item (\\$e[\\$i] + \\$nr); \\$k.getvaluenames() |%{ \\$r += [pscustomobject]@{ l = \\\"Run:\\\" + \\$l[\\$i]; n = \\$_; c = \\$k.getvalue(\\$_) }}}; foreach (\\$i in 0..1) { ((new-object -com shell.application).namespace(\\\"shell:\\\" + \\$f[\\$i] + \\\"Startup\\\").items() |%{ \\$r += [pscustomobject]@{ l = \\\"Startup:\\\" + \\$l[\\$i]; n = \\$_.name; c = \\$_.path }})}; \\$x = get-itemproperty (\\\"HKLM\\\" + \\$ne), (\\\"HKCU\\\" + \\$ne); \\$nuwp = (\\$r |? c -ne \\\"\\\" |%{ \\$o = [pscustomobject]@{ location = \\$_.l; name = \\$_.n; disabled = 0; command = \\$_.c; path = \\$null }; \\$x |%{ \\$p = \\$_.PSPath; \\$_ | get-member -type noteproperty |? name -eq \\$o.name |%{ \\$v = get-itempropertyvalue \\$p -name \\$o.name; \\$o.path = \\$p; \\$o.disabled = \\$v[0] -band 1 }}; \\$o }); \\$uwp = (get-appxpackage |% { try { \\$x = \\$_; \\$t = (get-appxpackagemanifest \\$_).package.applications.application.extensions.extension |? category -like \\\"*.startuptask\\\"; if (\\$t -ne \\$null) { \\$p = \\$nc + \\\"Classes\\\\Local Settings\\\" + \\$ns + \\$nw + \\\"AppModel\\\\SystemAppData\\\\\\\" + \\$x.packagefamilyname + \\\"\\\\\\\" + \\$t.startuptask.taskid; \\$s = (get-item \\$p).getvalue(\\\"state\\\"); \\$o = [pscustomobject]@{ location = \\\"UWP\\\"; name = \\$x.name; disabled = \\$s -band 1; command = \\$x.installlocation + \\\"\\\\\\\" + \\$t.executable; path = \\$p }; \\$o }} catch {}}); \\$nuwp+\\$uwp"
        object_list = PSArray().build(cmd, self.name_key_u, self.target, self.flag_exact)
        return sorted(object_list, key=lambda x:x["NAME"].upper())

    def state(self, o):
        f = o.get("DISABLED")
        if f is None:
            return None 
        return "disabled" if (f == "1") else "enabled"

    def buildStatePath(self, o):
        location = o.get("LOCATION")
        if location == "Run:WoW":
            root = "HKLM"
            subfolder = "Run32"
        else:
            loctype, locowner = location.split(":")
            if locowner == "User":
                root = "HKCU"
            else:
                root = "HKLM"
            if loctype == "Startup":
                subfolder = "StartupFolder"
            else:
                subfolder = "Run"
        return root + ":\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupApproved\\" + subfolder

    def taskType(self, o):
        return o.get("LOCATION")

    def doList(self, o):
        printMsg("{1}{0}{2}".format(self.sep(), self.name(), o.get("NAME")))
        return True

    def doInfo(self, o):
        printMsg("{1}{0}{2}{0}{3}{0}{4}{0}{5}".format(self.sep(), self.name(), o.get("NAME") or "", o.get("LOCATION") or "", self.state(o) or "", o.get("COMMAND") or ""))
        return True

    def doStart(self, o):
        flag_dirty = False
        if o.get("NAME") is None:
            self.warningNoCommandCandidates(o.get("NAME"))
        else:
            if self.confirm("Enable", o.get("NAME"), self.state(o)):
                if self.taskType(o) == "UWP":
                    Shell.ps("set-itemproperty -path \\\"" + o.get("PATH") + "\\\" -name state -value 2")
                    flag_dirty = True
                else:
                    if len(o.get("PATH")) > 0:
                        Shell.ps("\\$k = \\\"" + o.get("PATH") + "\\\"; \\$n = \\\"" + o.get("NAME") + "\\\"; \\$v = get-itempropertyvalue \\$k -name \\$n; \\$v[0] = \\$v[0] -band 0xfe; set-itemproperty \\$k -name \\$n -value \\$v")
                        flag_dirty = True
                    else:
                        Shell.ps("\\$k = \\\"" + self.buildStatePath(o) + "\\\"; \\$n = \\\"" + o.get("NAME") + "\\\"; set-itemproperty \\$k -name \\$n -value ([byte[]]@(2,0,0,0,0,0,0,0,0,0,0,0))")
                        flag_dirty = True
        return flag_dirty

    def doStop(self, o):
        flag_dirty = False
        if o.get("NAME") is None:
            self.warningNoCommandCandidates(o.get("NAME"))
        else:
            if self.confirm("Disable", o.get("NAME"), self.state(o)):
                if self.taskType(o) == "UWP":
                    Shell.ps("set-itemproperty -path \\\"" + o.get("PATH") + "\\\" -name state -value 1")
                    flag_dirty = True
                else:
                    if len(o.get("PATH")) > 0:
                        Shell.ps("\\$k = \\\"" + o.get("PATH") + "\\\"; \\$n = \\\"" + o.get("NAME") + "\\\"; \\$v = get-itempropertyvalue \\$k -name \\$n; \\$v[0] = \\$v[0] -bor 1; set-itemproperty \\$k -name \\$n -value \\$v")
                        flag_dirty = True
                    else:
                        Shell.ps("\\$k = \\\"" + self.buildStatePath(o) + "\\\"; \\$n = \\\"" + o.get("NAME") + "\\\"; set-itemproperty \\$k -name \\$n -value ([byte[]]@(1,0,0,0,0,0,0,0,0,0,0,0))")
                        flag_dirty = True
        return flag_dirty

    def doPrintHeader(self):
        printMsg("{1}{0}{2}{0}{3}{0}{4}{0}{5}{0}{6}".format(self.sep(), "mode", self.name(), "name", "location", "state", "command"))

if __name__ == "__main__":

    import argparse
    from argparse import HelpFormatter
    from operator import attrgetter
    class SortingHelpFormatter(HelpFormatter):
        def add_arguments(self, actions):
            actions = sorted(actions, key=attrgetter("option_strings"))
            super(SortingHelpFormatter, self).add_arguments(actions)

    parser = argparse.ArgumentParser(description="Windows application control", usage="%(prog)s [options] [target]", formatter_class=SortingHelpFormatter)
    parser.add_argument("target", nargs="?", default=None, help="target name")

    # modes
    parser.add_argument("-a", "--application", dest="modes", action="append_const", const=Application(), help="mode: shell applications in 'Shell:AppsFolder'")
    parser.add_argument("-P", "--package", dest="modes", action="append_const", const=Package(), help="mode: Windows Store packages (UWP)")
    parser.add_argument("-I", "--installed", dest="modes", action="append_const", const=Installed(), help="mode: installed packages in 'Uninstall' registry")
    parser.add_argument("-R", "--startup", dest="modes", action="append_const", const=Startup(), help="mode: shell startups in shell startup folders, 'Run' registry, and UWP configuration")
    parser.add_argument("-S", "--service", dest="modes", action="append_const", const=Service(), help="mode: Win32 services")
    parser.add_argument("-p", "--process", dest="modes", action="append_const", const=Process(), help="mode: running processes")

    # operations
    parser.add_argument("-l", "--list", dest="ops", action="append_const", const=Mode.OpIndex.LIST, help="operation: list")
    parser.add_argument("-i", "--info", dest="ops", action="append_const", const=Mode.OpIndex.INFO, help="operation: info")
    parser.add_argument("-0", "--stop", dest="ops", action="append_const", const=Mode.OpIndex.STOP, help="operation: stop")
    parser.add_argument("-k", "--kill", dest="ops", action="append_const", const=Mode.OpIndex.STOP, help="operation: stop")
    parser.add_argument("-1", "--start", dest="ops", action="append_const", const=Mode.OpIndex.START, help="operation: start")
    parser.add_argument("-x", "--execute", dest="ops", action="append_const", const=Mode.OpIndex.START, help="operation: start")
    parser.add_argument("-z", "--remove", dest="ops", action="append_const", const=Mode.OpIndex.REMOVE, help="operation: remove")

    # misc options
    parser.add_argument("-s", "--separator", nargs=1, default=" ", help="field separator for output")
    parser.add_argument("-e", "--exact", action="store_true", help="only exact match")
    parser.add_argument("-H", "--print-header", action="store_true", help="print header")
    parser.add_argument("-y", "--yes", action="store_true", help="assume yes")
    parser.add_argument("-W", "--warning", action="store_true", help="print warnings")

    if len(sys.argv) == 1:
        printError(parser.format_usage())
        exit(0)

    args = parser.parse_args()

    Mode.setTarget(args.target)
    Mode.setSeparator(args.separator[0])
    Mode.setFlags(args.exact, args.yes, args.print_header)
    if args.warning is True:
        no_warning = False
        ps_stderr = sys.stderr

    if args.modes is None:
        args.modes = [Application(), Package(), Installed(), Service(), Startup(), Process()]

    if args.ops is None:
        op = Mode.OpIndex.LIST
    elif len(args.ops) == 1:
        op = args.ops[0]
    else:
        printError("Expected only one operation.")
        exit(errno.EPERM)

    ret_code = 0
    for m in args.modes:
        if m.test(op) is False:
            printWarning("{}: No operation is defined.".format(m.name()))
        else:
            ret_code =  m.op(op)

    exit(ret_code)
